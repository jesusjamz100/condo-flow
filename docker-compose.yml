services:
  # 1) Config Server
  config-server:
    build:
      context: ./config-server
    image: config-server
    container_name: config-server
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka
    networks:
      - condo-net

  # 2) Eureka / Discovery Service
  discovery-service:
    build:
      context: ./discovery
    image: discovery-service
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      start_period: 30s
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - condo-net
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=default

  # 3) API Gateway
  gateway-service:
    build:
      context: ./gateway
    image: gateway-service
    container_name: gateway-service
    ports:
      - "8222:8222"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - condo-net
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_PROFILES_ACTIVE=default

  # 4) Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks:
      - condo-net

  # 5) PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - condo-net

  # 6) Condo Service
  condo-service:
    build:
      context: ./services/condo
    image: condo-service
    container_name: condo-service
    ports:
      - "8082:8082"
    environment:
      # Pasamos las mismas vars de Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/condodb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - condo-net

  # 7) Payment Service
  payment-service:
    build:
      context: ./services/payment
    image: payment-service
    container_name: payment-service
    ports:
      - "8084:8084"
    environment:
      # Pasamos las mismas vars de Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paymentdb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - condo-net

  # 8) Expense service
  expense-service:
    build:
      context: ./services/expense
    image: expense-service
    container_name: expense-service
    ports:
      - "8086:8086"
    environment:
      # Pasamos las mismas vars de Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/expensedb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - condo-net

  # 9) Billing service
  billing-service:
    build:
      context: ./services/billing
    image: billing-service
    container_name: billing-service
    ports:
      - "8088:8088"
    environment:
      # Pasamos las mismas vars de Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/billingdb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - condo-net

networks:
  condo-net:
    driver: bridge

volumes:
  postgres-data:
  keycloak-data: